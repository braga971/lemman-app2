create table if not exists public.commesse (
  id uuid primary key default gen_random_uuid(),
  code text not null unique,
  cantiere text,
  descrizione text,
  created_at timestamp with time zone default now()
);
create table if not exists public.posizioni_commessa (
  id uuid primary key default gen_random_uuid(),
  commessa_id uuid references public.commesse(id) on delete cascade,
  nome text not null,
  valore numeric default 0,
  created_at timestamp with time zone default now()
);
create table if not exists public.turni (
  id uuid primary key default gen_random_uuid(),
  dipendente_id uuid references public.profiles(id) on delete cascade,
  data date not null,
  orario text,
  commessa_id uuid references public.commesse(id) on delete set null
);
create table if not exists public.attivita (
  id uuid primary key default gen_random_uuid(),
  dipendente_id uuid references public.profiles(id) on delete cascade,
  commessa_id uuid references public.commesse(id) on delete set null,
  data date not null,
  titolo text,
  descrizione text,
  foto_url text,
  stato text default 'todo' check (stato in ('todo','done')),
  created_at timestamp with time zone default now()
);
create table if not exists public.rapportini (
  id uuid primary key default gen_random_uuid(),
  dipendente_id uuid references public.profiles(id) on delete cascade,
  commessa_id uuid references public.commesse(id) on delete set null,
  posizione_id uuid references public.posizioni_commessa(id) on delete set null,
  data date not null,
  ore numeric not null,
  descrizione text,
  stato text default 'in_review' check (stato in ('in_review','approved','rejected')),
  note_manager text,
  approved_at timestamp with time zone,
  approved_by uuid references public.profiles(id)
);
create table if not exists public.notifications (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  message text not null,
  read boolean default false,
  created_at timestamp with time zone default now()
);
alter table public.notifications enable row level security;
do $$ begin
  create policy if not exists "user sees own notifications" on public.notifications for select using (auth.uid() = user_id);
  create policy if not exists "user insert own notifications" on public.notifications for insert with check (auth.uid() = user_id or exists (select 1 from public.profiles p where p.id = auth.uid() and p.role='manager'));
end $$;
alter table public.attivita enable row level security;
do $$ begin
  create policy if not exists "dipendente vede solo sue attivita" on public.attivita for select using (auth.uid() = dipendente_id or exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager'));
  create policy if not exists "dipendente modifica solo sue attivita" on public.attivita for update using (auth.uid() = dipendente_id or exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager'));
  create policy if not exists "manager inserisce" on public.attivita for insert with check (exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager'));
end $$;
alter table public.turni enable row level security;
do $$ begin
  create policy if not exists "dipendente vede solo suoi turni" on public.turni for select using (auth.uid() = dipendente_id or exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager'));
  create policy if not exists "manager modifica turni" on public.turni for all using (exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager')) with check (exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager'));
end $$;
alter table public.rapportini enable row level security;
do $$ begin
  create policy if not exists "dipendente vede propri rapportini" on public.rapportini for select using (auth.uid() = dipendente_id or exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager'));
  create policy if not exists "dipendente inserisce/modifica propri rapportini" on public.rapportini for insert with check (auth.uid() = dipendente_id);
  create policy if not exists "manager approva" on public.rapportini for update using (exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager'));
end $$;
alter table public.commesse enable row level security;
alter table public.posizioni_commessa enable row level security;
do $$ begin
  create policy if not exists "manager full su commesse" on public.commesse for all using (exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager')) with check (exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager'));
  create policy if not exists "manager full su posizioni" on public.posizioni_commessa for all using (exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager')) with check (exists(select 1 from profiles p where p.id=auth.uid() and p.role='manager'));
end $$;
